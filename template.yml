AWSTemplateFormatVersion: 2010-09-09
Description: Deploy a VPC with public/private subnets

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true

  # Public subnets (placed in 1 az randomly)
  PublicSubA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region

  PublicSubB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region

  PublicSubC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.3.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref AWS::Region

  # Private subnets
  PrivateSubA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.4.0/24"
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region

  PrivateSubB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.5.0/24"
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region

  PrivateSubC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.6.0/24"
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref AWS::Region

  # Internet gateway and attachment to VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public routing table and routes with subnet associations
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RoutePublic:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublic

  RouteTableAssocSubnetPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubA

  RouteTableAssocSubnetPublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubB

  RouteTableAssocSubnetPublicC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubC

  # Private route tables and routes along with subnet associations
  ElasticIPNatGatewayPrivateA:
    Type: AWS::EC2::EIP

  # Optimisation - Step 1. Comment out this entire resource
  ElasticIPNatGatewayPrivateB:
    Type: AWS::EC2::EIP

  # Optimisation - Step 1. Comment out this entire resource
  ElasticIPNatGatewayPrivateC:
    Type: AWS::EC2::EIP

  NatGatewayPrivateA:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PrivateSubA
      AllocationId: !GetAtt ElasticIPNatGatewayPrivateA.AllocationId

  # Optimisation - Step 1. Comment out this entire resource
  NatGatewayPrivateB:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PrivateSubB
      AllocationId: !GetAtt ElasticIPNatGatewayPrivateB.AllocationId

  # Optimisation - Step 1. Comment out this entire resource
  NatGatewayPrivateC:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PrivateSubC
      AllocationId: !GetAtt ElasticIPNatGatewayPrivateC.AllocationId

  RouteTablePrivateA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # Optimisation - Step 1. Comment out this entire resource
  RouteTablePrivateB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # Optimisation - Step 1. Comment out this entire resource
  RouteTablePrivateC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RoutePrivate:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGatewayPrivateA
      RouteTableId: !Ref RouteTablePrivateA

  RouteTableAssocSubnetPrivateA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivateA
      SubnetId: !Ref PrivateSubA

  RouteTableAssocSubnetPrivateB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      # RouteTableId: !Ref RouteTablePrivateA # Optimisation - Step 1. Uncomment this line
      RouteTableId: !Ref RouteTablePrivateB # Optimisation - Step 1. Comment out this line
      SubnetId: !Ref PrivateSubB

  RouteTableAssocSubnetPrivateC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      # RouteTableId: !Ref RouteTablePrivateA # Optimisation - Step 1. Uncomment this line
      RouteTableId: !Ref RouteTablePrivateC # Optimisation - Step 1. Comment out this line
      SubnetId: !Ref PrivateSubC

# Outputs:
#   VPCID:
#     Value: !Ref VPC
#     Export:
#       Name: VPCID
#   PublicSubnetA:
#     Value: !Ref PublicSubA
#     Export:
#       Name: PublicSubnetA
#   PublicSubnetB:
#     Value: !Ref PublicSubB
#     Export:
#       Name: PublicSubnetB
#   PublicSubnetC:
#     Value: !Ref PublicSubC
#     Export:
#       Name: PublicSubnetC
#   PrivateSubnetA:
#     Value: !Ref PrivateSubA
#     Export:
#       Name: PrivateSubnetA
#   PrivateSubnetB:
#     Value: !Ref PrivateSubB
#     Export:
#       Name: PrivateSubnetB
#   PrivateSubnetC:
#     Value: !Ref PrivateSubC
#     Export:
#       Name: PrivateSubnetC
